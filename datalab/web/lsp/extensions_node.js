"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExecutionStatus = void 0;
/** The status of a cell's execution. */
var ExecutionStatus;
(function (ExecutionStatus) {
    /** The default value for an execution status. */
    ExecutionStatus[ExecutionStatus["UNKNOWN"] = 0] = "UNKNOWN";
    /** Execution is up to date. */
    ExecutionStatus[ExecutionStatus["FRESH"] = 1] = "FRESH";
    /** Execution is out of date. */
    ExecutionStatus[ExecutionStatus["STALE"] = 2] = "STALE";
})(ExecutionStatus || (exports.ExecutionStatus = ExecutionStatus = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZW5zaW9uc19ub2RlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vZ2VuZmlsZXMvdGhpcmRfcGFydHkvY29sYWIvc291cmNlcy9sc3AvZXh0ZW5zaW9uc19ub2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQW1DQSx3Q0FBd0M7QUFDeEMsSUFBWSxlQU9YO0FBUEQsV0FBWSxlQUFlO0lBQ3pCLGlEQUFpRDtJQUNqRCwyREFBVyxDQUFBO0lBQ1gsK0JBQStCO0lBQy9CLHVEQUFLLENBQUE7SUFDTCxnQ0FBZ0M7SUFDaEMsdURBQUssQ0FBQTtBQUNQLENBQUMsRUFQVyxlQUFlLCtCQUFmLGVBQWUsUUFPMUIiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCAqIGFzIGNhcGFiaWxpdGllcyBmcm9tICcuL2NhcGFiaWxpdGllc19ub2RlJztcbmltcG9ydCAqIGFzIHByb3RvY29sIGZyb20gJy4vcHJvdG9jb2xfbm9kZSc7XG5pbXBvcnQgKiBhcyB0ZXh0RG9jdW1lbnQgZnJvbSAnLi90ZXh0X2RvY3VtZW50X25vZGUnO1xuXG4vLyB0c2xpbnQ6ZGlzYWJsZTplbmZvcmNlLW5hbWUtY2FzaW5nXG5cbi8qKlxuICogUGFyYW1ldGVyIGZvciBgaW5pdGlhbGl6ZWAgbWVzc2FnZXMuXG4gKiBBZGRzIGEgZmxhZyBjb250cm9sbGluZyB3aGV0aGVyIHdlIHJ1biBBdXRvRml4LlxuICovXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgSW5pdGlhbGl6ZVBhcmFtcyBleHRlbmRzXG4gICAgY2FwYWJpbGl0aWVzLkluaXRpYWxpemVQYXJhbXMge1xuICBhdXRvRml4OiBib29sZWFuO1xufVxuXG4vKipcbiAqIFBhcmFtZXRlciBmb3IgYHRleHREb2N1bWVudC9kaWRPcGVuYCBtZXNzYWdlcy5cbiAqIEFkZHMgYSBwcmVhbWJsZSBzdHJpbmcuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEaWRPcGVuVGV4dERvY3VtZW50UGFyYW1zIGV4dGVuZHNcbiAgICB0ZXh0RG9jdW1lbnQuRGlkT3BlblRleHREb2N1bWVudFBhcmFtcyB7XG4gIHJlYWRvbmx5IHByZWFtYmxlOiBzdHJpbmc7XG59XG5cbi8qKiBQYXJhbWV0ZXJzIGZvciBgdGV4dERvY3VtZW50L3JlcGFpcmAgbWVzc2FnZXMuICovXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgUmVwYWlyUGFyYW1zIHtcbiAgY29kZTogc3RyaW5nO1xufVxuXG4vKiogUmVzdWx0IGZvciBgdGV4dERvY3VtZW50L3JlcGFpcmAgbWVzc2FnZXMuICovXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgUmVwYWlyUmVzdWx0IHtcbiAgcmVwYWlyZWRDb2RlOiBzdHJpbmc7XG59XG5cbi8qKiBUaGUgc3RhdHVzIG9mIGEgY2VsbCdzIGV4ZWN1dGlvbi4gKi9cbmV4cG9ydCBlbnVtIEV4ZWN1dGlvblN0YXR1cyB7XG4gIC8qKiBUaGUgZGVmYXVsdCB2YWx1ZSBmb3IgYW4gZXhlY3V0aW9uIHN0YXR1cy4gKi9cbiAgVU5LTk9XTiA9IDAsXG4gIC8qKiBFeGVjdXRpb24gaXMgdXAgdG8gZGF0ZS4gKi9cbiAgRlJFU0gsXG4gIC8qKiBFeGVjdXRpb24gaXMgb3V0IG9mIGRhdGUuICovXG4gIFNUQUxFLFxufVxuXG4vKipcbiAqIE1hcCBmcm9tIGNlbGwgaW5kZXggdG8gdGhlIGV4ZWN1dGlvbiBzdGF0dXMgb2YgdGhhdCBjZWxsLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEV4ZWN1dGlvblN0YXR1c2VzIHtcbiAgW2luZGV4OiBudW1iZXJdOiBFeGVjdXRpb25TdGF0dXM7XG59XG5cbi8qKlxuICogRXhwYW5zaW9uRmVhdHVyZXMgZGVmaW5lcyB0aGUgb3B0aW9ucyB0aGF0IGNhbiBiZSBjb25maWd1cmVkIGhvd1xuICogcHJlcmVxdWlzaXRlcyBvciBkZXBlbmRlbnRzIGFyZSBleHBhbmRlZC5cbiAqXG4gKiBTZWUgZWFjaCBmaWVsZCBmb3IgaXRzIHJlc3BlY3RpdmUgZGVmYXVsdC4gTGVmdCB1bnNwZWNpZmllZCwgdGhleSBhcmUgdXNlZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBFeHBhbnNpb25GZWF0dXJlcyB7XG4gIC8qKlxuICAgKiBFeGVjdXRpb25TdGF0dXNQcm9wYWdhdGlvbiB0b2dnbGVzIHdoZXRoZXIgdGhlIHByb3ZpZGVkIGV4ZWN1dGlvbiBzdGF0dXNlc1xuICAgKiBhcmUgcHJvcGFnYXRlZCBhbG9uZyB0aGUgZWRnZXMgb2YgY29ubmVjdGVkIGNlbGxzLlxuICAgKlxuICAgKiBVbnNwZWNpZmllZCBzZXJ2ZXItc2lkZSBkZWZhdWx0IGlzIHRydWUuXG4gICAqL1xuICBleGVjdXRpb25TdGF0dXNQcm9wYWdhdGlvbj86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIExpbmtJbXBvcnRzVG9JbnN0YWxscyB0b2dnbGVzIHdoZXRoZXIgaW1wb3J0cyBhcmUgbGlua2VkIHRvIGluc3RhbGxzLlxuICAgKlxuICAgKiBVbnNwZWNpZmllZCBzZXJ2ZXItc2lkZSBkZWZhdWx0IGlzIHRydWUuXG4gICAqL1xuICBsaW5rSW1wb3J0c1RvSW5zdGFsbHM/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBMaW5rSURBc3NpZ25tZW50cyB0b2dnbGVzIHdoZXRoZXIgSURzIG9uIHRoZSBMSFMgb2YgYW4gYXNzaWdubWVudCBhcmVcbiAgICogbGlua2VkIHRvIHRob3NlIG9uIHRoZSBSSFMuXG4gICAqXG4gICAqIFVuc3BlY2lmaWVkIHNlcnZlci1zaWRlIGRlZmF1bHQgaXMgdHJ1ZS5cbiAgICovXG4gIGxpbmtJZEFzc2lnbm1lbnRzPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogQmFja3RyYWNraW5nU3RyYXRlZ3kgZGVmaW5lcyB0aGUgc3RyYXRlZ3kgdG8gdXNlIHdoZW4gd29ya2luZy1iYWNrXG4gICAqIHJlZmVyZW5jZXMuXG4gICAqXG4gICAqIFVuc3BlY2lmaWVkIHNlcnZlci1zaWRlIGRlZmF1bHQgaXMgJ25vbi1saXRlcmFscycuXG4gICAqXG4gICAqIE9wdGlvbnMgYXJlOlxuICAgKlxuICAgKiAgIC0gJ25vbmUnXG4gICAqICAgLSAnYWxsJ1xuICAgKiAgIC0gJ25vbi1saXRlcmFscydcbiAgICovXG4gIGJhY2t0cmFja2luZ1N0cmF0ZWd5Pzogc3RyaW5nO1xufVxuXG4vKipcbiAqIFBhcmFtcyBmb3IgdGhlIGRlcGVuZGVudCBjZWxscyByZXF1ZXN0LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENlbGxEZXBlbmRlbnRzUGFyYW1zIHtcbiAgLyoqXG4gICAqIFRoZSBjb2xsZWN0aW9uIG9mIGNlbGwgaW5kaWNlcyB3aG9zZSBkZXBlbmRlbnRzIGFyZSByZXF1ZXN0ZWQuXG4gICAqL1xuICBjZWxsczogbnVtYmVyW107XG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsbHkgZGVmaW5lcyB0aGUgZmVhdHVyZSBjb250cm9scyB0aGF0IGFyZSB1c2VkIHdoZW4gZXhwYW5kaW5nIHRoZVxuICAgKiBwcmVyZXF1aXNpdGVzLlxuICAgKi9cbiAgZXhwYW5zaW9uRmVhdHVyZXM/OiBFeHBhbnNpb25GZWF0dXJlcztcbn1cblxuLyoqXG4gKiBQYXJhbXMgZm9yIHRoZSBjZWxsIHByZXJlcXVpc2l0ZXMgcmVxdWVzdC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDZWxsUHJlcmVxdWlzaXRlc1BhcmFtcyB7XG4gIC8qKiBUaGUgZG9jdW1lbnQgVVJJLiAqL1xuICB1cmk6IHByb3RvY29sLkRvY3VtZW50VXJpO1xuXG4gIC8qKlxuICAgKiBUaGUgY29sbGVjdGlvbiBvZiBjZWxsIGluZGljZXMgd2hvc2UgcHJlcmVxdWlzaXRlcyBhcmUgcmVxdWVzdGVkLlxuICAgKi9cbiAgY2VsbHM6IG51bWJlcltdO1xuXG4gIC8qKlxuICAgKiBNYXAgZnJvbSBjZWxsIGluZGV4IHRvIHRoZSBleGVjdXRpb24gc3RhdHVzIG9mIHRoYXQgY2VsbC5cbiAgICovXG4gIGV4ZWN1dGlvblN0YXR1c2VzPzogRXhlY3V0aW9uU3RhdHVzZXM7XG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsbHkgZGVmaW5lcyB0aGUgZmVhdHVyZSBjb250cm9scyB0aGF0IGFyZSB1c2VkIHdoZW4gZXhwYW5kaW5nIHRoZVxuICAgKiBwcmVyZXF1aXNpdGVzLlxuICAgKi9cbiAgZXhwYW5zaW9uRmVhdHVyZXM/OiBFeHBhbnNpb25GZWF0dXJlcztcbn1cblxuLyoqIEEgcG9pbnRlciB0byBhIGNlbGwgaW4gdGhlIG5vdGVib29rIHdpdGggc3RhdGVmdWwgaW5mb3JtYXRpb24uICovXG5leHBvcnQgaW50ZXJmYWNlIENlbGwge1xuICAvKiogVGhlIGluZGV4IG9mIHRoZSBjZWxsIGluIHRoZSBub3RlYm9vay4gKi9cbiAgaW5kZXg6IG51bWJlcjtcbiAgLyoqIFRoZSBzdGF0dXMgb2YgdGhlIGNlbGwncyBleGVjdXRpb24uICovXG4gIGV4ZWN1dGlvblN0YXR1czogRXhlY3V0aW9uU3RhdHVzO1xufVxuXG4vKipcbiAqIEEgY29ubmVjdGlvbiBiZXR3ZWVuIHR3byBzeW1ib2xzIHdoZXJlIG9uZSByZWZlcmVuY2VzIGFub3RoZXIuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU3ltYm9sUmVmIHtcbiAgLyoqXG4gICAqIFRoZSBzeW1ib2wgdGhhdCBlc3RhYmxpc2hlcyB0aGUgcmVmZXJlbmNlLlxuICAgKi9cbiAgc291cmNlOiBwcm90b2NvbC5SYW5nZTtcblxuICAvKipcbiAgICogVGhlIHN5bWJvbCB0aGF0IGlzIHJlZmVyZW5jZWQgYnkgdGhlIHNvdXJjZSBzeW1ib2wuXG4gICAqL1xuICB0YXJnZXQ6IHByb3RvY29sLlJhbmdlO1xufVxuXG4vKipcbiAqIEEgY29ubmVjdGlvbiBiZXR3ZWVuIHR3byBjZWxscyB3aGVyZSBvbmUgcmVmZXJlbmNlcyBhbm90aGVyLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENlbGxSZWYge1xuICAvKipcbiAgICogVGhlIGNlbGwgdGhhdCBlc3RhYmxpc2hlcyB0aGUgcmVmZXJlbmNlLlxuICAgKi9cbiAgc291cmNlOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBjZWxsIHRoYXQgaXMgcmVmZXJlbmNlZCBieSB0aGUgc291cmNlIGNlbGwuXG4gICAqL1xuICB0YXJnZXQ6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIGNvbGxlY3Rpb24gb2Ygc3ltYm9sIHJlZmVyZW5jZXMgdGhhdCBlc3RhYmxpc2ggdGhlIHJlZmVyZW5jZS5cbiAgICovXG4gIG9uOiBTeW1ib2xSZWZbXTtcbn1cblxuLyoqXG4gKiBBIGdyYXBoIG9mIGNlbGxzIGFuZCB0aGVpciByZWZlcmVuY2VzIHRoYXQgZXN0YWJsaXNoIGRlcGVuZGVuY2llcyBiZXR3ZWVuXG4gKiB0aGVtLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENlbGxHcmFwaCB7XG4gIC8qKlxuICAgKiBUaGUgaW5kaWNlcyBvZiBjZWxscyBpbiBhIFB5dGhvbiBub3RlYm9vay5cbiAgICovXG4gIGNlbGxzPzogQ2VsbFtdO1xuXG4gIC8qKlxuICAgKiBUaGUgcmVmZXJlbmNlIGdyYXBoIHdoaWNoIGVzdGFibGlzaGVzIGRlcGVuZGVuY2llcyBiZXR3ZWVuIHRoZSBjZWxscy5cbiAgICovXG4gIHJlZnM/OiBDZWxsUmVmW107XG59XG5cbi8qKlxuICogRGVwZW5kZW50Q2VsbHNSZXNwb25zZSByZXByZXNlbnRzIGEgcmVzcG9uc2UgZnJvbSBlaXRoZXIgcHJlcmVxdWlzaXRlIG9yXG4gKiBkZXBlbmRlbnQgY2VsbHMuIEl0IGNvbnRhaW5zIGEgZ3JhcGggdGhhdCByZXByZXNlbnRzIGNlbGxzIGFuZCB0aGVpclxuICogcmVmZXJlbmNlcyB0aGF0IGVzdGFibGlzaGVzIHRoZSBkZXBlbmRlbmNpZXMgYmV0d2VlbiB0aGVtLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIERlcGVuZGVudENlbGxzUmVzcG9uc2UgZXh0ZW5kcyBDZWxsR3JhcGgge1xuICAvKipcbiAgICogTWFnaWNzIHRoYXQgYXJlIG5vdCBzdXBwb3J0ZWQgYnkgcHJlcmVxIGNlbGxzLCBhbmQgbWF5IGxlYWQgdG8gaW5jb3JyZWN0XG4gICAqIHJlc3VsdHMuXG4gICAqL1xuICB1bnN1cHBvcnRlZE1hZ2ljcz86IHN0cmluZ1tdO1xufVxuIl19