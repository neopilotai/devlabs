"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileChangeType = exports.WatchKind = void 0;
/**
 * See:
 * https://microsoft.github.io/language-server-protocol/specification#workspace_didChangeWatchedFiles
 */
var WatchKind;
(function (WatchKind) {
    /**
     * Interested in create events.
     */
    WatchKind[WatchKind["Create"] = 1] = "Create";
    /**
     * Interested in change events
     */
    WatchKind[WatchKind["Change"] = 2] = "Change";
    /**
     * Interested in delete events
     */
    WatchKind[WatchKind["Delete"] = 4] = "Delete";
})(WatchKind || (exports.WatchKind = WatchKind = {}));
/**
 * The file event type.
 */
var FileChangeType;
(function (FileChangeType) {
    /**
     * The file got created.
     */
    FileChangeType[FileChangeType["Created"] = 1] = "Created";
    /**
     * The file got changed.
     */
    FileChangeType[FileChangeType["Changed"] = 2] = "Changed";
    /**
     * The file got deleted.
     */
    FileChangeType[FileChangeType["Deleted"] = 3] = "Deleted";
})(FileChangeType || (exports.FileChangeType = FileChangeType = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya3NwYWNlX25vZGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9nZW5maWxlcy90aGlyZF9wYXJ0eS9jb2xhYi9zb3VyY2VzL2xzcC93b3Jrc3BhY2Vfbm9kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFpVEE7OztHQUdHO0FBQ0gsSUFBWSxTQWVYO0FBZkQsV0FBWSxTQUFTO0lBQ25COztPQUVHO0lBQ0gsNkNBQVUsQ0FBQTtJQUVWOztPQUVHO0lBQ0gsNkNBQVUsQ0FBQTtJQUVWOztPQUVHO0lBQ0gsNkNBQVUsQ0FBQTtBQUNaLENBQUMsRUFmVyxTQUFTLHlCQUFULFNBQVMsUUFlcEI7QUEyQkQ7O0dBRUc7QUFDSCxJQUFZLGNBYVg7QUFiRCxXQUFZLGNBQWM7SUFDeEI7O09BRUc7SUFDSCx5REFBVyxDQUFBO0lBQ1g7O09BRUc7SUFDSCx5REFBVyxDQUFBO0lBQ1g7O09BRUc7SUFDSCx5REFBVyxDQUFBO0FBQ2IsQ0FBQyxFQWJXLGNBQWMsOEJBQWQsY0FBYyxRQWF6QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHByb3RvY29sIGZyb20gJy4vcHJvdG9jb2xfbm9kZSc7XG5pbXBvcnQgKiBhcyB0ZXh0RG9jdW1lbnQgZnJvbSAnLi90ZXh0X2RvY3VtZW50X25vZGUnO1xuXG4vLyB0c2xpbnQ6ZGlzYWJsZTplbmZvcmNlLW5hbWUtY2FzaW5nXG5cbi8qKlxuICogVGhlIHdvcmtzcGFjZS9jb25maWd1cmF0aW9uIHJlcXVlc3QgaXMgc2VudCBmcm9tIHRoZSBzZXJ2ZXIgdG8gdGhlIGNsaWVudCB0b1xuICogZmV0Y2ggY29uZmlndXJhdGlvbiBzZXR0aW5ncyBmcm9tIHRoZSBjbGllbnQuIFRoZSByZXF1ZXN0IGNhbiBmZXRjaCBzZXZlcmFsXG4gKiBjb25maWd1cmF0aW9uIHNldHRpbmdzIGluIG9uZSByb3VuZHRyaXAuIFRoZSBvcmRlciBvZiB0aGUgcmV0dXJuZWRcbiAqIGNvbmZpZ3VyYXRpb24gc2V0dGluZ3MgY29ycmVzcG9uZCB0byB0aGUgb3JkZXIgb2YgdGhlIHBhc3NlZFxuICogQ29uZmlndXJhdGlvbkl0ZW1zIChlLmcuIHRoZSBmaXJzdCBpdGVtIGluIHRoZSByZXNwb25zZSBpcyB0aGUgcmVzdWx0IGZvclxuICogdGhlIGZpcnN0IGNvbmZpZ3VyYXRpb24gaXRlbSBpbiB0aGUgcGFyYW1zKS5cbiAqIGh0dHBzOi8vbWljcm9zb2Z0LmdpdGh1Yi5pby9sYW5ndWFnZS1zZXJ2ZXItcHJvdG9jb2wvc3BlY2lmaWNhdGlvbnMvc3BlY2lmaWNhdGlvbi1jdXJyZW50LyN3b3Jrc3BhY2VfY29uZmlndXJhdGlvblxuICovXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgQ29uZmlndXJhdGlvblBhcmFtcyB7XG4gIGl0ZW1zOiBDb25maWd1cmF0aW9uSXRlbVtdO1xufVxuXG4vKipcbiAqIFNwZWNpZmljIHBhcnQgb2YgdGhlIENvbmZpZ3VyYXRpb24gd2hpY2ggaXMgYmVpbmcgcmVxdWVzdGVkLlxuICogaHR0cHM6Ly9taWNyb3NvZnQuZ2l0aHViLmlvL2xhbmd1YWdlLXNlcnZlci1wcm90b2NvbC9zcGVjaWZpY2F0aW9ucy9zcGVjaWZpY2F0aW9uLWN1cnJlbnQvI3dvcmtzcGFjZV9jb25maWd1cmF0aW9uXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBDb25maWd1cmF0aW9uSXRlbSB7XG4gIC8qKlxuICAgKiBUaGUgc2NvcGUgdG8gZ2V0IHRoZSBjb25maWd1cmF0aW9uIHNlY3Rpb24gZm9yLlxuICAgKi9cbiAgc2NvcGVVcmk/OiBwcm90b2NvbC5Eb2N1bWVudFVyaTtcblxuICAvKipcbiAgICogVGhlIGNvbmZpZ3VyYXRpb24gc2VjdGlvbiBhc2tlZCBmb3IuXG4gICAqL1xuICBzZWN0aW9uPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEEgbm90aWZpY2F0aW9uIHNlbnQgZnJvbSB0aGUgY2xpZW50IHRvIHRoZSBzZXJ2ZXIgdG8gc2lnbmFsIHRoZSBjaGFuZ2Ugb2ZcbiAqIGNvbmZpZ3VyYXRpb24gc2V0dGluZ3MuXG4gKiBodHRwczovL21pY3Jvc29mdC5naXRodWIuaW8vbGFuZ3VhZ2Utc2VydmVyLXByb3RvY29sL3NwZWNpZmljYXRpb25zL3NwZWNpZmljYXRpb24tY3VycmVudC8jd29ya3NwYWNlX2RpZENoYW5nZUNvbmZpZ3VyYXRpb25cbiAqL1xuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIERpZENoYW5nZUNvbmZpZ3VyYXRpb24gZXh0ZW5kc1xuICAgIHByb3RvY29sLk5vdGlmaWNhdGlvbk1lc3NhZ2U8RGlkQ2hhbmdlQ29uZmlndXJhdGlvblBhcmFtcz4ge1xuICBtZXRob2Q6IHByb3RvY29sLk1ldGhvZC5Xb3Jrc3BhY2VEaWRDaGFuZ2VDb25maWd1cmF0aW9uO1xufVxuXG4vKipcbiAqIFBhcmFtZXRlcnMgZm9yIERpZENoYW5nZUNvbmZpZ3VyYXRpb24uXG4gKiBodHRwczovL21pY3Jvc29mdC5naXRodWIuaW8vbGFuZ3VhZ2Utc2VydmVyLXByb3RvY29sL3NwZWNpZmljYXRpb25zL3NwZWNpZmljYXRpb24tY3VycmVudC8jd29ya3NwYWNlX2RpZENoYW5nZUNvbmZpZ3VyYXRpb25cbiAqL1xuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIERpZENoYW5nZUNvbmZpZ3VyYXRpb25QYXJhbXMge1xuICAvKipcbiAgICogVGhlIGFjdHVhbCBjaGFuZ2VkIHNldHRpbmdzXG4gICAqL1xuICBzZXR0aW5nczogdW5rbm93bjtcbn1cblxuLyoqXG4gKiBodHRwczovL21pY3Jvc29mdC5naXRodWIuaW8vbGFuZ3VhZ2Utc2VydmVyLXByb3RvY29sL3NwZWNpZmljYXRpb25zL3NwZWNpZmljYXRpb24tY3VycmVudC8jd29ya3NwYWNlRWRpdFxuICovXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgV29ya3NwYWNlRWRpdCB7XG4gIC8qKlxuICAgKiBIb2xkcyBjaGFuZ2VzIHRvIGV4aXN0aW5nIHJlc291cmNlcy5cbiAgICovXG4gIGNoYW5nZXM/OiB7W3VyaTogc3RyaW5nXTogdGV4dERvY3VtZW50LlRleHRFZGl0W107fTtcblxuICAvKipcbiAgICogVGhlIGNsaWVudCBjYXBhYmlsaXR5IGB3b3Jrc3BhY2Uud29ya3NwYWNlRWRpdC5yZXNvdXJjZU9wZXJhdGlvbnNgXG4gICAqIGRldGVybWluZXMgd2hldGhlciBkb2N1bWVudCBjaGFuZ2VzIGFyZSBlaXRoZXIgYW4gYXJyYXkgb2ZcbiAgICogYFRleHREb2N1bWVudEVkaXRgcyB0byBleHByZXNzIGNoYW5nZXMgdG8gZGlmZmVyZW50IHRleHQgZG9jdW1lbnRzLFxuICAgKiB3aGVyZSBlYWNoIHRleHQgZG9jdW1lbnQgZWRpdCBhZGRyZXNzZXMgYSBzcGVjaWZpYyB2ZXJzaW9uXG4gICAqIG9mIGEgdGV4dCBkb2N1bWVudCwgb3IgaXQgY2FuIGNvbnRhaW5zIHRoZSBhYm92ZSBgVGV4dERvY3VtZW50RWRpdGBzXG4gICAqIG1peGVkIHdpdGggY3JlYXRlLCByZW5hbWUsIGFuZCBkZWxldGUgZmlsZSAvIGZvbGRlciBvcGVyYXRpb25zLlxuICAgKlxuICAgKiBXaGV0aGVyIGEgY2xpZW50IHN1cHBvcnRzIHZlcnNpb25lZCBkb2N1bWVudCBlZGl0cyBpcyBleHByZXNzZWQgdmlhXG4gICAqIGB3b3Jrc3BhY2Uud29ya3NwYWNlRWRpdC5kb2N1bWVudENoYW5nZXNgIGNsaWVudCBjYXBhYmlsaXR5LlxuICAgKlxuICAgKiBJZiBhIGNsaWVudCBkb2Vzbid0IHN1cHBvcnQgYGRvY3VtZW50Q2hhbmdlc2Agb3JcbiAgICogYHdvcmtzcGFjZS53b3Jrc3BhY2VFZGl0LnJlc291cmNlT3BlcmF0aW9uc2AsIHRoZW4gb25seSBwbGFpblxuICAgKiBgVGV4dEVkaXRgcyB1c2luZyB0aGUgYGNoYW5nZXNgIHByb3BlcnR5IGFyZSBzdXBwb3J0ZWQuXG4gICAqL1xuICBkb2N1bWVudENoYW5nZXM/OlxuICAgICAgKHRleHREb2N1bWVudC5UZXh0RG9jdW1lbnRFZGl0W118XG4gICAgICAgQXJyYXk8dGV4dERvY3VtZW50LlRleHREb2N1bWVudEVkaXR8Q3JlYXRlRmlsZXxSZW5hbWVGaWxlfERlbGV0ZUZpbGU+KTtcbn1cblxuLyoqXG4gKiBPcHRpb25zIHRvIGNyZWF0ZSBhIGZpbGUuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBDcmVhdGVGaWxlT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBPdmVyd3JpdGUgZXhpc3RpbmcgZmlsZS4gT3ZlcndyaXRlIHdpbnMgb3ZlciBgaWdub3JlSWZFeGlzdHNgXG4gICAqL1xuICBvdmVyd3JpdGU/OiBib29sZWFuO1xuICAvKipcbiAgICogSWdub3JlIGlmIGV4aXN0cy5cbiAgICovXG4gIGlnbm9yZUlmRXhpc3RzPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBDcmVhdGUgZmlsZSBvcGVyYXRpb25cbiAqL1xuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIENyZWF0ZUZpbGUge1xuICAvKipcbiAgICogQSBjcmVhdGVcbiAgICovXG4gIGtpbmQ6ICdjcmVhdGUnO1xuICAvKipcbiAgICogVGhlIHJlc291cmNlIHRvIGNyZWF0ZS5cbiAgICovXG4gIHVyaTogcHJvdG9jb2wuRG9jdW1lbnRVcmk7XG4gIC8qKlxuICAgKiBBZGRpdGlvbmFsIG9wdGlvbnNcbiAgICovXG4gIG9wdGlvbnM/OiBDcmVhdGVGaWxlT3B0aW9ucztcbn1cblxuXG4vKipcbiAqIFJlbmFtZSBmaWxlIG9wdGlvbnNcbiAqL1xuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIFJlbmFtZUZpbGVPcHRpb25zIHtcbiAgLyoqXG4gICAqIE92ZXJ3cml0ZSB0YXJnZXQgaWYgZXhpc3RpbmcuIE92ZXJ3cml0ZSB3aW5zIG92ZXIgYGlnbm9yZUlmRXhpc3RzYFxuICAgKi9cbiAgb3ZlcndyaXRlPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIElnbm9yZXMgaWYgdGFyZ2V0IGV4aXN0cy5cbiAgICovXG4gIGlnbm9yZUlmRXhpc3RzPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBSZW5hbWUgZmlsZSBvcGVyYXRpb25cbiAqL1xuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIFJlbmFtZUZpbGUge1xuICAvKipcbiAgICogQSByZW5hbWVcbiAgICovXG4gIGtpbmQ6ICdyZW5hbWUnO1xuICAvKipcbiAgICogVGhlIG9sZCAoZXhpc3RpbmcpIGxvY2F0aW9uLlxuICAgKi9cbiAgb2xkVXJpOiBwcm90b2NvbC5Eb2N1bWVudFVyaTtcbiAgLyoqXG4gICAqIFRoZSBuZXcgbG9jYXRpb24uXG4gICAqL1xuICBuZXdVcmk6IHByb3RvY29sLkRvY3VtZW50VXJpO1xuICAvKipcbiAgICogUmVuYW1lIG9wdGlvbnMuXG4gICAqL1xuICBvcHRpb25zPzogUmVuYW1lRmlsZU9wdGlvbnM7XG59XG5cbi8qKlxuICogRGVsZXRlIGZpbGUgb3B0aW9uc1xuICovXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRGVsZXRlRmlsZU9wdGlvbnMge1xuICAvKipcbiAgICogRGVsZXRlIHRoZSBjb250ZW50IHJlY3Vyc2l2ZWx5IGlmIGEgZm9sZGVyIGlzIGRlbm90ZWQuXG4gICAqL1xuICByZWN1cnNpdmU/OiBib29sZWFuO1xuICAvKipcbiAgICogSWdub3JlIHRoZSBvcGVyYXRpb24gaWYgdGhlIGZpbGUgZG9lc24ndCBleGlzdC5cbiAgICovXG4gIGlnbm9yZUlmTm90RXhpc3RzPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBEZWxldGUgZmlsZSBvcGVyYXRpb25cbiAqL1xuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIERlbGV0ZUZpbGUge1xuICAvKipcbiAgICogQSBkZWxldGVcbiAgICovXG4gIGtpbmQ6ICdkZWxldGUnO1xuICAvKipcbiAgICogVGhlIGZpbGUgdG8gZGVsZXRlLlxuICAgKi9cbiAgdXJpOiBwcm90b2NvbC5Eb2N1bWVudFVyaTtcbiAgLyoqXG4gICAqIERlbGV0ZSBvcHRpb25zLlxuICAgKi9cbiAgb3B0aW9ucz86IERlbGV0ZUZpbGVPcHRpb25zO1xufVxuXG5cbi8qKlxuICogaHR0cHM6Ly9taWNyb3NvZnQuZ2l0aHViLmlvL2xhbmd1YWdlLXNlcnZlci1wcm90b2NvbC9zcGVjaWZpY2F0aW9ucy9zcGVjaWZpY2F0aW9uLWN1cnJlbnQvI3dvcmtzcGFjZV9zeW1ib2xcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBXb3Jrc3BhY2VTeW1ib2xDbGllbnRDYXBhYmlsaXRpZXMge1xuICAvKipcbiAgICogU3ltYm9sIHJlcXVlc3Qgc3VwcG9ydHMgZHluYW1pYyByZWdpc3RyYXRpb24uXG4gICAqL1xuICBkeW5hbWljUmVnaXN0cmF0aW9uPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogU3BlY2lmaWMgY2FwYWJpbGl0aWVzIGZvciB0aGUgYFN5bWJvbEtpbmRgIGluIHRoZVxuICAgKiBgd29ya3NwYWNlL3N5bWJvbGAgcmVxdWVzdC5cbiAgICovXG4gIHN5bWJvbEtpbmQ/OiB7XG4gICAgLyoqXG4gICAgICogVGhlIHN5bWJvbCBraW5kIHZhbHVlcyB0aGUgY2xpZW50IHN1cHBvcnRzLiBXaGVuIHRoaXNcbiAgICAgKiBwcm9wZXJ0eSBleGlzdHMgdGhlIGNsaWVudCBhbHNvIGd1YXJhbnRlZXMgdGhhdCBpdCB3aWxsXG4gICAgICogaGFuZGxlIHZhbHVlcyBvdXRzaWRlIGl0cyBzZXQgZ3JhY2VmdWxseSBhbmQgZmFsbHMgYmFja1xuICAgICAqIHRvIGEgZGVmYXVsdCB2YWx1ZSB3aGVuIHVua25vd24uXG4gICAgICpcbiAgICAgKiBJZiB0aGlzIHByb3BlcnR5IGlzIG5vdCBwcmVzZW50IHRoZSBjbGllbnQgb25seSBzdXBwb3J0c1xuICAgICAqIHRoZSBzeW1ib2wga2luZHMgZnJvbSBgRmlsZWAgdG8gYEFycmF5YCBhcyBkZWZpbmVkIGluXG4gICAgICogdGhlIGluaXRpYWwgdmVyc2lvbiBvZiB0aGUgcHJvdG9jb2wuXG4gICAgICovXG4gICAgdmFsdWVTZXQ/OiBwcm90b2NvbC5TeW1ib2xLaW5kW107XG4gIH07XG5cbiAgLyoqXG4gICAqIFRoZSBjbGllbnQgc3VwcG9ydHMgdGFncyBvbiBgU3ltYm9sSW5mb3JtYXRpb25gLlxuICAgKiBDbGllbnRzIHN1cHBvcnRpbmcgdGFncyBoYXZlIHRvIGhhbmRsZSB1bmtub3duIHRhZ3MgZ3JhY2VmdWxseS5cbiAgICpcbiAgICogQHNpbmNlIDMuMTYuMFxuICAgKi9cbiAgdGFnU3VwcG9ydD86IHtcbiAgICAvKipcbiAgICAgKiBUaGUgdGFncyBzdXBwb3J0ZWQgYnkgdGhlIGNsaWVudC5cbiAgICAgKi9cbiAgICB2YWx1ZVNldDogcHJvdG9jb2wuU3ltYm9sVGFnW10sXG4gIH07XG59XG5cbi8qKlxuICogaHR0cHM6Ly9taWNyb3NvZnQuZ2l0aHViLmlvL2xhbmd1YWdlLXNlcnZlci1wcm90b2NvbC9zcGVjaWZpY2F0aW9ucy9zcGVjaWZpY2F0aW9uLWN1cnJlbnQvI3dvcmtzcGFjZV9kaWRDaGFuZ2VXYXRjaGVkRmlsZXNcbiAqL1xuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIERpZENoYW5nZVdhdGNoZWRGaWxlc0NsaWVudENhcGFiaWxpdGllcyB7XG4gIC8qKlxuICAgKiBEaWQgY2hhbmdlIHdhdGNoZWQgZmlsZXMgbm90aWZpY2F0aW9uIHN1cHBvcnRzIGR5bmFtaWMgcmVnaXN0cmF0aW9uLlxuICAgKiBQbGVhc2Ugbm90ZSB0aGF0IHRoZSBjdXJyZW50IHByb3RvY29sIGRvZXNuJ3Qgc3VwcG9ydCBzdGF0aWNcbiAgICogY29uZmlndXJhdGlvbiBmb3IgZmlsZSBjaGFuZ2VzIGZyb20gdGhlIHNlcnZlciBzaWRlLlxuICAgKi9cbiAgZHluYW1pY1JlZ2lzdHJhdGlvbj86IGJvb2xlYW47XG59XG5cbi8qKlxuICogaHR0cHM6Ly9taWNyb3NvZnQuZ2l0aHViLmlvL2xhbmd1YWdlLXNlcnZlci1wcm90b2NvbC9zcGVjaWZpY2F0aW9ucy9zcGVjaWZpY2F0aW9uLWN1cnJlbnQvI3dvcmtzcGFjZV9kaWRDaGFuZ2VDb25maWd1cmF0aW9uXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEaWRDaGFuZ2VDb25maWd1cmF0aW9uQ2xpZW50Q2FwYWJpbGl0aWVzIHtcbiAgLyoqXG4gICAqIERpZCBjaGFuZ2UgY29uZmlndXJhdGlvbiBub3RpZmljYXRpb24gc3VwcG9ydHMgZHluYW1pYyByZWdpc3RyYXRpb24uXG4gICAqL1xuICBkeW5hbWljUmVnaXN0cmF0aW9uPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBodHRwczovL21pY3Jvc29mdC5naXRodWIuaW8vbGFuZ3VhZ2Utc2VydmVyLXByb3RvY29sL3NwZWNpZmljYXRpb25zL3NwZWNpZmljYXRpb24tY3VycmVudC8jd29ya3NwYWNlX3dvcmtzcGFjZUZvbGRlcnNcbiAqL1xuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIFdvcmtzcGFjZUZvbGRlciB7XG4gIC8qKlxuICAgKiBUaGUgYXNzb2NpYXRlZCBVUkkgZm9yIHRoaXMgd29ya3NwYWNlIGZvbGRlci5cbiAgICovXG4gIHVyaTogcHJvdG9jb2wuRG9jdW1lbnRVcmk7XG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSB3b3Jrc3BhY2UgZm9sZGVyLiBVc2VkIHRvIHJlZmVyIHRvIHRoaXNcbiAgICogd29ya3NwYWNlIGZvbGRlciBpbiB0aGUgdXNlciBpbnRlcmZhY2UuXG4gICAqL1xuICBuYW1lOiBzdHJpbmc7XG59XG5cbi8qKlxuICogRGVzY3JpYmUgb3B0aW9ucyB0byBiZSB1c2VkIHdoZW4gcmVnaXN0ZXJpbmcgZm9yIGZpbGUgc3lzdGVtIGNoYW5nZSBldmVudHMuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEaWRDaGFuZ2VXYXRjaGVkRmlsZXNSZWdpc3RyYXRpb25PcHRpb25zIHtcbiAgLyoqXG4gICAqIFRoZSB3YXRjaGVycyB0byByZWdpc3Rlci5cbiAgICovXG4gIHdhdGNoZXJzOiBGaWxlU3lzdGVtV2F0Y2hlcltdO1xufVxuXG4vKipcbiAqIFNlZTpcbiAqIGh0dHBzOi8vbWljcm9zb2Z0LmdpdGh1Yi5pby9sYW5ndWFnZS1zZXJ2ZXItcHJvdG9jb2wvc3BlY2lmaWNhdGlvbiN3b3Jrc3BhY2VfZGlkQ2hhbmdlV2F0Y2hlZEZpbGVzXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBGaWxlU3lzdGVtV2F0Y2hlciB7XG4gIC8qKlxuICAgKiBUaGUgZ2xvYiBwYXR0ZXJuIHRvIHdhdGNoLlxuICAgKlxuICAgKiBHbG9iIHBhdHRlcm5zIGNhbiBoYXZlIHRoZSBmb2xsb3dpbmcgc3ludGF4OlxuICAgKiAtIGAqYCB0byBtYXRjaCBvbmUgb3IgbW9yZSBjaGFyYWN0ZXJzIGluIGEgcGF0aCBzZWdtZW50XG4gICAqIC0gYD9gIHRvIG1hdGNoIG9uIG9uZSBjaGFyYWN0ZXIgaW4gYSBwYXRoIHNlZ21lbnRcbiAgICogLSBgKipgIHRvIG1hdGNoIGFueSBudW1iZXIgb2YgcGF0aCBzZWdtZW50cywgaW5jbHVkaW5nIG5vbmVcbiAgICogLSBge31gIHRvIGdyb3VwIHN1YiBwYXR0ZXJucyBpbnRvIGFuIE9SIGV4cHJlc3Npb24uIChlLmcuIGAqKuKAiy8qLnt0cyxqc31gXG4gICAqICAgbWF0Y2hlcyBhbGwgVHlwZVNjcmlwdCBhbmQgSmF2YVNjcmlwdCBmaWxlcylcbiAgICogLSBgW11gIHRvIGRlY2xhcmUgYSByYW5nZSBvZiBjaGFyYWN0ZXJzIHRvIG1hdGNoIGluIGEgcGF0aCBzZWdtZW50XG4gICAqICAgKGUuZy4sIGBleGFtcGxlLlswLTldYCB0byBtYXRjaCBvbiBgZXhhbXBsZS4wYCwgYGV4YW1wbGUuMWAsIOKApilcbiAgICogLSBgWyEuLi5dYCB0byBuZWdhdGUgYSByYW5nZSBvZiBjaGFyYWN0ZXJzIHRvIG1hdGNoIGluIGEgcGF0aCBzZWdtZW50XG4gICAqICAgKGUuZy4sIGBleGFtcGxlLlshMC05XWAgdG8gbWF0Y2ggb24gYGV4YW1wbGUuYWAsIGBleGFtcGxlLmJgLCBidXQgbm90XG4gICAqICAgYGV4YW1wbGUuMGApXG4gICAqL1xuICBnbG9iUGF0dGVybjogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUga2luZCBvZiBldmVudHMgb2YgaW50ZXJlc3QuIElmIG9taXR0ZWQgaXQgZGVmYXVsdHNcbiAgICogdG8gV2F0Y2hLaW5kLkNyZWF0ZSB8IFdhdGNoS2luZC5DaGFuZ2UgfCBXYXRjaEtpbmQuRGVsZXRlXG4gICAqIHdoaWNoIGlzIDcuXG4gICAqL1xuICBraW5kPzogV2F0Y2hLaW5kO1xufVxuXG4vKipcbiAqIFNlZTpcbiAqIGh0dHBzOi8vbWljcm9zb2Z0LmdpdGh1Yi5pby9sYW5ndWFnZS1zZXJ2ZXItcHJvdG9jb2wvc3BlY2lmaWNhdGlvbiN3b3Jrc3BhY2VfZGlkQ2hhbmdlV2F0Y2hlZEZpbGVzXG4gKi9cbmV4cG9ydCBlbnVtIFdhdGNoS2luZCB7XG4gIC8qKlxuICAgKiBJbnRlcmVzdGVkIGluIGNyZWF0ZSBldmVudHMuXG4gICAqL1xuICBDcmVhdGUgPSAxLFxuXG4gIC8qKlxuICAgKiBJbnRlcmVzdGVkIGluIGNoYW5nZSBldmVudHNcbiAgICovXG4gIENoYW5nZSA9IDIsXG5cbiAgLyoqXG4gICAqIEludGVyZXN0ZWQgaW4gZGVsZXRlIGV2ZW50c1xuICAgKi9cbiAgRGVsZXRlID0gNCxcbn1cblxuLyoqXG4gKiBTZWU6XG4gKiBodHRwczovL21pY3Jvc29mdC5naXRodWIuaW8vbGFuZ3VhZ2Utc2VydmVyLXByb3RvY29sL3NwZWNpZmljYXRpb24jd29ya3NwYWNlX2RpZENoYW5nZVdhdGNoZWRGaWxlc1xuICovXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRGlkQ2hhbmdlV2F0Y2hlZEZpbGVzUGFyYW1zIHtcbiAgLyoqXG4gICAqIFRoZSBhY3R1YWwgZmlsZSBldmVudHMuXG4gICAqL1xuICBjaGFuZ2VzOiBGaWxlRXZlbnRbXTtcbn1cblxuLyoqXG4gKiBBbiBldmVudCBkZXNjcmliaW5nIGEgZmlsZSBjaGFuZ2UuXG4gKi9cbmRlY2xhcmUgaW50ZXJmYWNlIEZpbGVFdmVudCB7XG4gIC8qKlxuICAgKiBUaGUgZmlsZSdzIFVSSS5cbiAgICovXG4gIHVyaTogcHJvdG9jb2wuRG9jdW1lbnRVcmk7XG4gIC8qKlxuICAgKiBUaGUgY2hhbmdlIHR5cGUuXG4gICAqL1xuICB0eXBlOiBGaWxlQ2hhbmdlVHlwZTtcbn1cblxuLyoqXG4gKiBUaGUgZmlsZSBldmVudCB0eXBlLlxuICovXG5leHBvcnQgZW51bSBGaWxlQ2hhbmdlVHlwZSB7XG4gIC8qKlxuICAgKiBUaGUgZmlsZSBnb3QgY3JlYXRlZC5cbiAgICovXG4gIENyZWF0ZWQgPSAxLFxuICAvKipcbiAgICogVGhlIGZpbGUgZ290IGNoYW5nZWQuXG4gICAqL1xuICBDaGFuZ2VkID0gMixcbiAgLyoqXG4gICAqIFRoZSBmaWxlIGdvdCBkZWxldGVkLlxuICAgKi9cbiAgRGVsZXRlZCA9IDMsXG59XG4iXX0=