"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InlayHintKind = exports.SignatureHelpTriggerKind = exports.InsertTextMode = exports.InsertTextFormat = exports.CodeActionKind = exports.TextDocumentSyncKind = exports.CompletionTriggerKind = exports.LanguageIdentifier = exports.CompletionItemKind = exports.CompletionItemTag = exports.MarkupKind = void 0;
/**
 * Describes the content type that a client supports in various
 * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.
 *
 * Please note that `MarkupKinds` must not start with a `$`. This kinds
 * are reserved for internal usage.
 */
var MarkupKind;
(function (MarkupKind) {
    /**
     * Plain text is supported as a content format
     */
    MarkupKind["PlainText"] = "plaintext";
    /**
     * Markdown is supported as a content format
     */
    MarkupKind["Markdown"] = "markdown";
})(MarkupKind || (exports.MarkupKind = MarkupKind = {}));
/**
 * Completion item tags are extra annotations that tweak the rendering of
 * a completion item.
 *
 * @since 3.15.0
 */
var CompletionItemTag;
(function (CompletionItemTag) {
    /**
     * Render a completion as obsolete, usually using a strike-out.
     */
    CompletionItemTag[CompletionItemTag["Deprecated"] = 1] = "Deprecated";
})(CompletionItemTag || (exports.CompletionItemTag = CompletionItemTag = {}));
/**
 * The kind of a completion entry.
 */
var CompletionItemKind;
(function (CompletionItemKind) {
    CompletionItemKind[CompletionItemKind["Text"] = 1] = "Text";
    CompletionItemKind[CompletionItemKind["Method"] = 2] = "Method";
    CompletionItemKind[CompletionItemKind["Function"] = 3] = "Function";
    CompletionItemKind[CompletionItemKind["Constructor"] = 4] = "Constructor";
    CompletionItemKind[CompletionItemKind["Field"] = 5] = "Field";
    CompletionItemKind[CompletionItemKind["Variable"] = 6] = "Variable";
    CompletionItemKind[CompletionItemKind["Class"] = 7] = "Class";
    CompletionItemKind[CompletionItemKind["Interface"] = 8] = "Interface";
    CompletionItemKind[CompletionItemKind["Module"] = 9] = "Module";
    CompletionItemKind[CompletionItemKind["Property"] = 10] = "Property";
    CompletionItemKind[CompletionItemKind["Unit"] = 11] = "Unit";
    CompletionItemKind[CompletionItemKind["Value"] = 12] = "Value";
    CompletionItemKind[CompletionItemKind["Enum"] = 13] = "Enum";
    CompletionItemKind[CompletionItemKind["Keyword"] = 14] = "Keyword";
    CompletionItemKind[CompletionItemKind["Snippet"] = 15] = "Snippet";
    CompletionItemKind[CompletionItemKind["Color"] = 16] = "Color";
    CompletionItemKind[CompletionItemKind["File"] = 17] = "File";
    CompletionItemKind[CompletionItemKind["Reference"] = 18] = "Reference";
    CompletionItemKind[CompletionItemKind["Folder"] = 19] = "Folder";
    CompletionItemKind[CompletionItemKind["EnumMember"] = 20] = "EnumMember";
    CompletionItemKind[CompletionItemKind["Constant"] = 21] = "Constant";
    CompletionItemKind[CompletionItemKind["Struct"] = 22] = "Struct";
    CompletionItemKind[CompletionItemKind["Event"] = 23] = "Event";
    CompletionItemKind[CompletionItemKind["Operator"] = 24] = "Operator";
    CompletionItemKind[CompletionItemKind["TypeParameter"] = 25] = "TypeParameter";
})(CompletionItemKind || (exports.CompletionItemKind = CompletionItemKind = {}));
/**
 * Known language identifiers.
 * https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocumentItem
 */
var LanguageIdentifier;
(function (LanguageIdentifier) {
    LanguageIdentifier["ABAP"] = "abap";
    LanguageIdentifier["WindowsBat"] = "bat";
    LanguageIdentifier["BibTeX"] = "bibtex";
    LanguageIdentifier["Clojure"] = "clojure";
    LanguageIdentifier["Coffeescript"] = "coffeescript";
    LanguageIdentifier["C"] = "c";
    LanguageIdentifier["CPlusPlus"] = "cpp";
    LanguageIdentifier["CSharp"] = "csharp";
    LanguageIdentifier["CSS"] = "css";
    LanguageIdentifier["Diff"] = "diff";
    LanguageIdentifier["Dart"] = "dart";
    LanguageIdentifier["Dockerfile"] = "dockerfile";
    LanguageIdentifier["Elixir"] = "elixir";
    LanguageIdentifier["Erlang"] = "erlang";
    LanguageIdentifier["FSharp"] = "fsharp";
    LanguageIdentifier["GitCommit"] = "git-commit";
    LanguageIdentifier["GitRebase"] = "git-rebase";
    LanguageIdentifier["Go"] = "go";
    LanguageIdentifier["Groovy"] = "groovy";
    LanguageIdentifier["Handlebars"] = "handlebars";
    LanguageIdentifier["HTML"] = "html";
    LanguageIdentifier["Ini"] = "ini";
    LanguageIdentifier["Java"] = "java";
    LanguageIdentifier["JavaScript"] = "javascript";
    LanguageIdentifier["JavaScriptReact"] = "javascriptreact";
    LanguageIdentifier["JSON"] = "json";
    LanguageIdentifier["LaTeX"] = "latex";
    LanguageIdentifier["Less"] = "less";
    LanguageIdentifier["Lua"] = "lua";
    LanguageIdentifier["Makefile"] = "makefile";
    LanguageIdentifier["Markdown"] = "markdown";
    LanguageIdentifier["ObjectiveC"] = "c";
    LanguageIdentifier["ObjectiveCPlusPlus"] = "cpp";
    LanguageIdentifier["Perl"] = "perl";
    LanguageIdentifier["Perl6"] = "perl6";
    LanguageIdentifier["PHP"] = "php";
    LanguageIdentifier["Powershell"] = "powershell";
    LanguageIdentifier["Pug"] = "jade";
    LanguageIdentifier["Python"] = "python";
    LanguageIdentifier["R"] = "r";
    LanguageIdentifier["Razor"] = "razor";
    LanguageIdentifier["Ruby"] = "ruby";
    LanguageIdentifier["Rust"] = "rust";
    LanguageIdentifier["SCSS"] = "scss";
    LanguageIdentifier["Sass"] = "syntax";
    LanguageIdentifier["Scala"] = "scala";
    LanguageIdentifier["ShaderLab"] = "shaderlab";
    LanguageIdentifier["Shell"] = "shellscript";
    LanguageIdentifier["SQL"] = "sql";
    LanguageIdentifier["Swift"] = "swift";
    LanguageIdentifier["TypeScript"] = "typescript";
    LanguageIdentifier["TypeScriptReact"] = "typescriptreact";
    LanguageIdentifier["TeX"] = "tex";
    LanguageIdentifier["VisualBasic"] = "vb";
    LanguageIdentifier["XML"] = "xml";
    LanguageIdentifier["XSL"] = "xsl";
    LanguageIdentifier["YAML"] = "yaml";
})(LanguageIdentifier || (exports.LanguageIdentifier = LanguageIdentifier = {}));
/**
 * How a completion was triggered
 * https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_completion
 */
var CompletionTriggerKind;
(function (CompletionTriggerKind) {
    /**
     * Completion was triggered by typing an identifier (24x7 code
     * complete), manual invocation (e.g Ctrl+Space) or via API.
     */
    CompletionTriggerKind[CompletionTriggerKind["Invoked"] = 1] = "Invoked";
    /**
     * Completion was triggered by a trigger character specified by
     * the `triggerCharacters` properties of the
     * `CompletionRegistrationOptions`.
     */
    CompletionTriggerKind[CompletionTriggerKind["TriggerCharacter"] = 2] = "TriggerCharacter";
    /**
     * Completion was re-triggered as the current completion list is incomplete.
     */
    CompletionTriggerKind[CompletionTriggerKind["TriggerForIncompleteCompletions"] = 3] = "TriggerForIncompleteCompletions";
})(CompletionTriggerKind || (exports.CompletionTriggerKind = CompletionTriggerKind = {}));
/**
 * Defines how the host (editor) should sync document changes
 * to the language server.
 */
var TextDocumentSyncKind;
(function (TextDocumentSyncKind) {
    /**
     * Documents should not be synced at all.
     */
    TextDocumentSyncKind[TextDocumentSyncKind["None"] = 0] = "None";
    /**
     * Documents are synced by always sending the full content
     * of the document.
     */
    TextDocumentSyncKind[TextDocumentSyncKind["Full"] = 1] = "Full";
    /**
     * Documents are synced by sending the full content on open.
     * After that only incremental updates to the document are
     * send.
     */
    TextDocumentSyncKind[TextDocumentSyncKind["Incremental"] = 2] = "Incremental";
})(TextDocumentSyncKind || (exports.TextDocumentSyncKind = TextDocumentSyncKind = {}));
/**
 * The kind of a code action.
 *
 * Kinds are a hierarchical list of identifiers separated by `.`,
 * e.g. `"refactor.extract.function"`.
 *
 * The set of kinds is open and the client needs to announce the kinds it
 * supports to the server during initialization.
 */
var CodeActionKind;
(function (CodeActionKind) {
    /**
     * Empty kind.
     */
    CodeActionKind["Empty"] = "";
    /**
     * Base kind for quickfix actions: 'quickfix'.
     */
    CodeActionKind["QuickFix"] = "quickfix";
    /**
     * Base kind for refactoring actions: 'refactor'.
     */
    CodeActionKind["Refactor"] = "refactor";
    /**
     * Base kind for refactoring extraction actions: 'refactor.extract'.
     *
     * Example extract actions:
     *
     * - Extract method
     * - Extract function
     * - Extract variable
     * - Extract interface from class
     * - ...
     */
    CodeActionKind["RefactorExtract"] = "refactor.extract";
    /**
     * Base kind for refactoring inline actions: 'refactor.inline'.
     *
     * Example inline actions:
     *
     * - Inline function
     * - Inline variable
     * - Inline constant
     * - ...
     */
    CodeActionKind["RefactorInline"] = "refactor.inline";
    /**
     * Base kind for refactoring rewrite actions: 'refactor.rewrite'.
     *
     * Example rewrite actions:
     *
     * - Convert JavaScript function to class
     * - Add or remove parameter
     * - Encapsulate field
     * - Make method static
     * - Move method to base class
     * - ...
     */
    CodeActionKind["RefactorRewrite"] = "refactor.rewrite";
    /**
     * Base kind for source actions: `source`.
     *
     * Source code actions apply to the entire file.
     */
    CodeActionKind["Source"] = "source";
    /**
     * Base kind for an organize imports source action `source.organizeImports`.
     */
    CodeActionKind["SourceOrganizeImports"] = "source.organizeImports";
})(CodeActionKind || (exports.CodeActionKind = CodeActionKind = {}));
/**
 * Defines whether the insert text in a completion item should be interpreted as
 * plain text or a snippet.
 */
var InsertTextFormat;
(function (InsertTextFormat) {
    /**
     * The primary text to be inserted is treated as a plain string.
     */
    InsertTextFormat[InsertTextFormat["PlainText"] = 1] = "PlainText";
    /**
     * The primary text to be inserted is treated as a snippet.
     *
     * A snippet can define tab stops and placeholders with `$1`, `$2`
     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to
     * the end of the snippet. Placeholders with equal identifiers are linked,
     * that is typing in one will update others too.
     */
    InsertTextFormat[InsertTextFormat["Snippet"] = 2] = "Snippet";
})(InsertTextFormat || (exports.InsertTextFormat = InsertTextFormat = {}));
/**
 * How whitespace and indentation is handled during completion
 * item insertion.
 *
 * @since 3.16.0
 */
var InsertTextMode;
(function (InsertTextMode) {
    /**
     * The insertion or replace strings is taken as it is. If the
     * value is multi line the lines below the cursor will be
     * inserted using the indentation defined in the string value.
     * The client will not apply any kind of adjustments to the
     * string.
     */
    InsertTextMode[InsertTextMode["asIs"] = 1] = "asIs";
    /**
     * The editor adjusts leading whitespace of new lines so that
     * they match the indentation up to the cursor of the line for
     * which the item is accepted.
     *
     * Consider a line like this: <2tabs><cursor><3tabs>foo. Accepting a
     * multi line completion item is indented using 2 tabs and all
     * following lines inserted will be indented using 2 tabs as well.
     */
    InsertTextMode[InsertTextMode["adjustIndentation"] = 2] = "adjustIndentation";
})(InsertTextMode || (exports.InsertTextMode = InsertTextMode = {}));
/**
 * How a signature help was triggered.
 *
 * @since 3.15.0
 */
var SignatureHelpTriggerKind;
(function (SignatureHelpTriggerKind) {
    /**
     * Signature help was invoked manually by the user or by a command.
     */
    SignatureHelpTriggerKind[SignatureHelpTriggerKind["Invoked"] = 1] = "Invoked";
    /**
     * Signature help was triggered by a trigger character.
     */
    SignatureHelpTriggerKind[SignatureHelpTriggerKind["TriggerCharacter"] = 2] = "TriggerCharacter";
    /**
     * Signature help was triggered by the cursor moving or by the document
     * content changing.
     */
    SignatureHelpTriggerKind[SignatureHelpTriggerKind["ContentChange"] = 3] = "ContentChange";
})(SignatureHelpTriggerKind || (exports.SignatureHelpTriggerKind = SignatureHelpTriggerKind = {}));
/**
 * Inlay hint kinds.
 *
 * @since 3.17.0
 */
var InlayHintKind;
(function (InlayHintKind) {
    InlayHintKind[InlayHintKind["Empty"] = 0] = "Empty";
    /**
     * An inlay hint that for a type annotation.
     */
    InlayHintKind[InlayHintKind["Type"] = 1] = "Type";
    /**
     * An inlay hint that is for a parameter.
     */
    InlayHintKind[InlayHintKind["Parameter"] = 2] = "Parameter";
})(InlayHintKind || (exports.InlayHintKind = InlayHintKind = {}));
// tslint:enable:enforce-name-casing
//# sourceMappingURL=data:application/json;base64,