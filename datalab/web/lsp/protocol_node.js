"use strict";
// tslint:disable:enforce-name-casing
Object.defineProperty(exports, "__esModule", { value: true });
exports.SymbolTag = exports.SymbolKind = exports.DiagnosticSeverity = exports.DiagnosticTag = exports.FailureHandlingKind = exports.ResourceOperationKind = exports.ErrorCode = exports.Method = void 0;
/**
 * JSON-RPC Methods.
 */
var Method;
(function (Method) {
    Method["CancelRequest"] = "$/cancelRequest";
    Method["ClientRegisterCapability"] = "client/registerCapability";
    Method["ColabPipLogChanged"] = "colab/pipLogChanged";
    Method["CompletionItemResolve"] = "completionItem/resolve";
    Method["Initialize"] = "initialize";
    Method["Initialized"] = "initialized";
    Method["TextDocumentAutoExecuteCheck"] = "textDocument/autoExecuteCheck";
    Method["TextDocumentCodeAction"] = "textDocument/codeAction";
    Method["TextDocumentCompletion"] = "textDocument/completion";
    Method["TextDocumentDefinition"] = "textDocument/definition";
    Method["TextDocumentDidChange"] = "textDocument/didChange";
    Method["TextDocumentDidClose"] = "textDocument/didClose";
    Method["TextDocumentDidOpen"] = "textDocument/didOpen";
    Method["TextDocumentEchoDocument"] = "textDocument/echoDocument";
    Method["TextDocumentHover"] = "textDocument/hover";
    Method["TextDocumentCellDependents"] = "textDocument/cellDependents";
    Method["TextDocumentCellPrerequisites"] = "textDocument/cellPrerequisites";
    Method["TextDocumentInlayHint"] = "textDocument/inlayHint";
    Method["TextDocumentPublishDiagnostics"] = "textDocument/publishDiagnostics";
    Method["TextDocumentPrepareRename"] = "textDocument/prepareRename";
    Method["TextDocumentRename"] = "textDocument/rename";
    Method["TextDocumentRepair"] = "textDocument/repair";
    Method["TextDocumentSignatureHelp"] = "textDocument/signatureHelp";
    Method["WindowLogMessage"] = "window/logMessage";
    Method["WorkspaceConfiguration"] = "workspace/configuration";
    Method["WorkspaceDidChangeConfiguration"] = "workspace/didChangeConfiguration";
    Method["WorkspaceDidChangeWatchedFiles"] = "workspace/didChangeWatchedFiles";
})(Method || (exports.Method = Method = {}));
/**
 * https://microsoft.github.io/language-server-protocol/specifications/specification-current/#responseMessage
 */
var ErrorCode;
(function (ErrorCode) {
    // Defined by JSON RPC
    ErrorCode[ErrorCode["ParseError"] = -32700] = "ParseError";
    ErrorCode[ErrorCode["InvalidRequest"] = -32600] = "InvalidRequest";
    ErrorCode[ErrorCode["MethodNotFound"] = -32601] = "MethodNotFound";
    ErrorCode[ErrorCode["InvalidParams"] = -32602] = "InvalidParams";
    ErrorCode[ErrorCode["InternalError"] = -32603] = "InternalError";
    ErrorCode[ErrorCode["ServerErrorStart"] = -32099] = "ServerErrorStart";
    ErrorCode[ErrorCode["ServerErrorEnd"] = -32000] = "ServerErrorEnd";
    ErrorCode[ErrorCode["ServerNotInitialized"] = -32002] = "ServerNotInitialized";
    ErrorCode[ErrorCode["UnknownErrorCode"] = -32001] = "UnknownErrorCode";
    // Defined by the protocol.
    ErrorCode[ErrorCode["RequestCancelled"] = -32800] = "RequestCancelled";
    ErrorCode[ErrorCode["ContentModified"] = -32801] = "ContentModified";
})(ErrorCode || (exports.ErrorCode = ErrorCode = {}));
/**
 * The kind of resource operations supported by the client.
 */
var ResourceOperationKind;
(function (ResourceOperationKind) {
    /**
     * Supports creating new files and folders.
     */
    ResourceOperationKind["CREATE"] = "create";
    /**
     * Supports renaming existing files and folders.
     */
    ResourceOperationKind["RENAME"] = "rename";
    /**
     * Supports deleting existing files and folders.
     */
    ResourceOperationKind["DELETE"] = "delete";
})(ResourceOperationKind || (exports.ResourceOperationKind = ResourceOperationKind = {}));
/**
 * https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspaceEditClientCapabilities
 */
var FailureHandlingKind;
(function (FailureHandlingKind) {
    /**
     * Applying the workspace change is simply aborted if one of the changes
     * provided fails.
     * All operations executed before the failing operation stay executed.
     */
    FailureHandlingKind["Abort"] = "abort";
    /**
     * All operations are executed transactional. That means they either all
     * succeed or no changes at all are applied to the workspace.
     */
    FailureHandlingKind["Transactional"] = "transactional";
    /**
     * If the workspace edit contains only textual file changes, they are
     * executed transactionally.
     * If resource changes (create, rename or delete file) are part of the
     * change, the failure handling strategy is abort.
     */
    FailureHandlingKind["TextOnlyTransactional"] = "textOnlyTransactional";
    /**
     * The client tries to undo the operations already executed. But there is no
     * guarantee that this is succeeding.
     */
    FailureHandlingKind["Undo"] = "undo";
})(FailureHandlingKind || (exports.FailureHandlingKind = FailureHandlingKind = {}));
/**
 * The diagnostic tags.
 *
 * @since 3.15.0
 */
var DiagnosticTag;
(function (DiagnosticTag) {
    /**
     * Unused or unnecessary code.
     *
     * Clients are allowed to render diagnostics with this tag faded out
     * instead of having an error squiggle.
     */
    DiagnosticTag[DiagnosticTag["Unnecessary"] = 1] = "Unnecessary";
    /**
     * Deprecated or obsolete code.
     *
     * Clients are allowed to rendered diagnostics with this tag strike through.
     */
    DiagnosticTag[DiagnosticTag["Deprecated"] = 2] = "Deprecated";
})(DiagnosticTag || (exports.DiagnosticTag = DiagnosticTag = {}));
/**
 * https://microsoft.github.io/language-server-protocol/specifications/specification-current/#diagnostic
 */
var DiagnosticSeverity;
(function (DiagnosticSeverity) {
    /**
     * Reports an error.
     */
    DiagnosticSeverity[DiagnosticSeverity["Error"] = 1] = "Error";
    /**
     * Reports a warning.
     */
    DiagnosticSeverity[DiagnosticSeverity["Warning"] = 2] = "Warning";
    /**
     * Reports an information.
     */
    DiagnosticSeverity[DiagnosticSeverity["Information"] = 3] = "Information";
    /**
     * Reports a hint.
     */
    DiagnosticSeverity[DiagnosticSeverity["Hint"] = 4] = "Hint";
})(DiagnosticSeverity || (exports.DiagnosticSeverity = DiagnosticSeverity = {}));
/**
 * A symbol kind.
 */
var SymbolKind;
(function (SymbolKind) {
    SymbolKind[SymbolKind["File"] = 1] = "File";
    SymbolKind[SymbolKind["Module"] = 2] = "Module";
    SymbolKind[SymbolKind["Namespace"] = 3] = "Namespace";
    SymbolKind[SymbolKind["Package"] = 4] = "Package";
    SymbolKind[SymbolKind["Class"] = 5] = "Class";
    SymbolKind[SymbolKind["Method"] = 6] = "Method";
    SymbolKind[SymbolKind["Property"] = 7] = "Property";
    SymbolKind[SymbolKind["Field"] = 8] = "Field";
    SymbolKind[SymbolKind["Constructor"] = 9] = "Constructor";
    SymbolKind[SymbolKind["Enum"] = 10] = "Enum";
    SymbolKind[SymbolKind["Interface"] = 11] = "Interface";
    SymbolKind[SymbolKind["Function"] = 12] = "Function";
    SymbolKind[SymbolKind["Variable"] = 13] = "Variable";
    SymbolKind[SymbolKind["Constant"] = 14] = "Constant";
    SymbolKind[SymbolKind["String"] = 15] = "String";
    SymbolKind[SymbolKind["Number"] = 16] = "Number";
    SymbolKind[SymbolKind["Boolean"] = 17] = "Boolean";
    SymbolKind[SymbolKind["Array"] = 18] = "Array";
    SymbolKind[SymbolKind["Object"] = 19] = "Object";
    SymbolKind[SymbolKind["Key"] = 20] = "Key";
    SymbolKind[SymbolKind["Null"] = 21] = "Null";
    SymbolKind[SymbolKind["EnumMember"] = 22] = "EnumMember";
    SymbolKind[SymbolKind["Struct"] = 23] = "Struct";
    SymbolKind[SymbolKind["Event"] = 24] = "Event";
    SymbolKind[SymbolKind["Operator"] = 25] = "Operator";
    SymbolKind[SymbolKind["TypeParameter"] = 26] = "TypeParameter";
})(SymbolKind || (exports.SymbolKind = SymbolKind = {}));
/**
 * Symbol tags are extra annotations that tweak the rendering of a symbol.
 *
 * @since 3.16
 */
var SymbolTag;
(function (SymbolTag) {
    /**
     * Render a symbol as obsolete, usually using a strike-out.
     */
    SymbolTag[SymbolTag["Deprecated"] = 1] = "Deprecated";
})(SymbolTag || (exports.SymbolTag = SymbolTag = {}));
//# sourceMappingURL=data:application/json;base64,